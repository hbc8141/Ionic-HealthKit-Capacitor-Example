{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\n\nvar HealthKitOriginal =\n/** @class */\nfunction (_super) {\n  __extends(HealthKitOriginal, _super);\n\n  function HealthKitOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  HealthKitOriginal.prototype.available = function () {\n    return cordova(this, \"available\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.checkAuthStatus = function (options) {\n    return cordova(this, \"checkAuthStatus\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.requestAuthorization = function (options) {\n    return cordova(this, \"requestAuthorization\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.readDateOfBirth = function () {\n    return cordova(this, \"readDateOfBirth\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.readGender = function () {\n    return cordova(this, \"readGender\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.readBloodType = function () {\n    return cordova(this, \"readBloodType\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.readFitzpatrickSkinType = function () {\n    return cordova(this, \"readFitzpatrickSkinType\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.saveWeight = function (options) {\n    return cordova(this, \"saveWeight\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.readWeight = function (options) {\n    return cordova(this, \"readWeight\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.saveHeight = function (options) {\n    return cordova(this, \"saveHeight\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.readHeight = function (options) {\n    return cordova(this, \"readHeight\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.findWorkouts = function () {\n    return cordova(this, \"findWorkouts\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.saveWorkout = function (options) {\n    return cordova(this, \"saveWorkout\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.querySampleType = function (options) {\n    return cordova(this, \"querySampleType\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.querySampleTypeAggregated = function (options) {\n    return cordova(this, \"querySampleTypeAggregated\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.deleteSamples = function (options) {\n    return cordova(this, \"deleteSamples\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.monitorSampleType = function (options) {\n    return cordova(this, \"monitorSampleType\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.sumQuantityType = function (options) {\n    return cordova(this, \"sumQuantityType\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.saveQuantitySample = function (options) {\n    return cordova(this, \"saveQuantitySample\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.saveCorrelation = function (options) {\n    return cordova(this, \"saveCorrelation\", {}, arguments);\n  };\n\n  HealthKitOriginal.prototype.queryCorrelationType = function (options) {\n    return cordova(this, \"queryCorrelationType\", {}, arguments);\n  };\n\n  HealthKitOriginal.pluginName = \"HealthKit\";\n  HealthKitOriginal.plugin = \"com.telerik.plugins.healthkit\";\n  HealthKitOriginal.pluginRef = \"window.plugins.healthkit\";\n  HealthKitOriginal.repo = \"https://github.com/Telerik-Verified-Plugins/HealthKit\";\n  HealthKitOriginal.platforms = [\"iOS\"];\n  return HealthKitOriginal;\n}(IonicNativePlugin);\n\nvar HealthKit = new HealthKitOriginal();\nexport { HealthKit };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/health-kit/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface HealthKitOptions {\n  /**\n   * HKWorkoutActivityType constant\n   * Read more here: https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKWorkout_Class/#//apple_ref/c/tdef/HKWorkoutActivityType\n   */\n  activityType?: string;\n\n  /**\n   * 'hour', 'week', 'year' or 'day', default 'day'\n   */\n  aggregation?: string;\n\n  amount?: number;\n\n  /**\n   * specifies if the data returned by querySampleType() should be sorted by\n   * end date in ascending order, default is false\n   */\n  ascending?: boolean;\n\n  correlationType?: string;\n\n  date?: any;\n\n  distance?: number;\n\n  /**\n   * probably useful with the former param\n   */\n  distanceUnit?: string;\n\n  /**\n   * in seconds, optional, use either this or endDate\n   */\n  duration?: number;\n\n  endDate?: any;\n\n  energy?: number;\n\n  /**\n   * J|cal|kcal\n   */\n  energyUnit?: string;\n\n  extraData?: any;\n\n  /**\n   * limits the maximum number of records returned by querySampleType()\n   */\n  limit?: number;\n\n  metadata?: any;\n\n  quantityType?: string;\n\n  type?: string;\n\n  readTypes?: any;\n\n  requestWritePermission?: boolean;\n\n  samples?: any;\n\n  sampleType?: string;\n\n  startDate?: any;\n\n  /**\n   * m|cm|mm|in|ft\n   */\n  unit?: string;\n\n  requestReadPermission?: boolean;\n\n  writeTypes?: any;\n}\n\n/**\n * @name Health Kit\n * @description\n * The HealthKit plugin allows you to read data from and write data to the iOS 8+ HealthKit framework.\n * Any data saved shows up in the iOS Health app and is available for other iOS apps.\n *\n * @usage\n * ```typescript\n * import { HealthKit } from '@ionic-native/health-kit/ngx';\n *\n *\n * constructor(private healthKit: HealthKit) { }\n *\n * ...\n * ```\n *\n * @interfaces\n * HealthKitOptions\n */\n@Plugin({\n  pluginName: 'HealthKit',\n  plugin: 'com.telerik.plugins.healthkit',\n  pluginRef: 'window.plugins.healthkit',\n  repo: 'https://github.com/Telerik-Verified-Plugins/HealthKit',\n  platforms: ['iOS'],\n})\n@Injectable()\nexport class HealthKit extends IonicNativePlugin {\n  /**\n   * Check if HealthKit is supported (iOS8+, not on iPad)\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  available(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Pass in a type and get back on of undetermined | denied | authorized\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  checkAuthStatus(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Ask some or all permissions up front\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  requestAuthorization(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Formatted as yyyy-MM-dd\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  readDateOfBirth(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Output = male|female|other|unknown\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  readGender(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Output = A+|A-|B+|B-|AB+|AB-|O+|O-|unknown\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  readBloodType(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Output = I|II|III|IV|V|VI|unknown\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  readFitzpatrickSkinType(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone) and amount\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  saveWeight(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone)\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  readWeight(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot) and amount\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  saveHeight(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot)\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  readHeight(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * no params yet, so this will return all workouts ever of any type\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  findWorkouts(): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  saveWorkout(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  querySampleType(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  querySampleTypeAggregated(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  deleteSamples(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  monitorSampleType(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  sumQuantityType(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  saveQuantitySample(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  saveCorrelation(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   *\n   * @param options {HealthKitOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  queryCorrelationType(options: HealthKitOptions): Promise<any> {\n    return;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}