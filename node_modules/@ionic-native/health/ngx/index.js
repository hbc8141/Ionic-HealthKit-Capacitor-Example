import { __decorate, __extends } from "tslib";
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Injectable } from '@angular/core';
var Health = /** @class */ (function (_super) {
    __extends(Health, _super);
    function Health() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Health.prototype.isAvailable = function () { return cordova(this, "isAvailable", { "callbackOrder": "reverse" }, arguments); };
    Health.prototype.promptInstallFit = function () { return cordova(this, "promptInstallFit", { "callbackOrder": "reverse" }, arguments); };
    Health.prototype.requestAuthorization = function (datatypes) { return cordova(this, "requestAuthorization", {}, arguments); };
    Health.prototype.isAuthorized = function (datatypes) { return cordova(this, "isAuthorized", {}, arguments); };
    Health.prototype.query = function (queryOptions) { return cordova(this, "query", {}, arguments); };
    Health.prototype.queryAggregated = function (queryOptionsAggregated) { return cordova(this, "queryAggregated", {}, arguments); };
    Health.prototype.store = function (storeOptions) { return cordova(this, "store", {}, arguments); };
    Health.pluginName = "Health";
    Health.plugin = "cordova-plugin-health";
    Health.pluginRef = "navigator.health";
    Health.repo = "https://github.com/dariosalvi78/cordova-plugin-health";
    Health.platforms = ["Android", "iOS"];
    Health = __decorate([
        Injectable()
    ], Health);
    return Health;
}(IonicNativePlugin));
export { Health };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2hlYWx0aC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7SUErTWYsMEJBQWlCOzs7O0lBUzNDLDRCQUFXO0lBa0JYLGlDQUFnQjtJQXdCaEIscUNBQW9CLGFBQUMsU0FBc0M7SUFnQjNELDZCQUFZLGFBQUMsU0FBc0M7SUFvQ25ELHNCQUFLLGFBQUMsWUFBZ0M7SUEwQnRDLGdDQUFlLGFBQUMsc0JBQW9EO0lBbUJwRSxzQkFBSyxhQUFDLFlBQWdDOzs7Ozs7SUFwSjNCLE1BQU07UUFEbEIsVUFBVSxFQUFFO09BQ0EsTUFBTTtpQkFoTm5CO0VBZ040QixpQkFBaUI7U0FBaEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIZWFsdGhEYXRhVHlwZSB7XG4gIC8qKlxuICAgKiBSZWFkIG9ubHkgZGF0ZSB0eXBlcyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpb3NhbHZpNzgvY29yZG92YS1wbHVnaW4taGVhbHRoI3N1cHBvcnRlZC1kYXRhLXR5cGVzKVxuICAgKi9cbiAgcmVhZD86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBXcml0ZSBvbmx5IGRhdGUgdHlwZXMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGFyaW9zYWx2aTc4L2NvcmRvdmEtcGx1Z2luLWhlYWx0aCNzdXBwb3J0ZWQtZGF0YS10eXBlcylcbiAgICovXG4gIHdyaXRlPzogc3RyaW5nW107XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aFF1ZXJ5T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBTdGFydCBkYXRlIGZyb20gd2hpY2ggdG8gZ2V0IGRhdGFcbiAgICovXG4gIHN0YXJ0RGF0ZTogRGF0ZTtcblxuICAvKipcbiAgICogRW5kIGRhdGUgZnJvbSB3aGljaCB0byBnZXQgZGF0YVxuICAgKi9cbiAgZW5kRGF0ZTogRGF0ZTtcblxuICAvKipcbiAgICogRGF0YXR5cGUgdG8gYmUgcXVlcmllZCAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJpb3NhbHZpNzgvY29yZG92YS1wbHVnaW4taGVhbHRoI3N1cHBvcnRlZC1kYXRhLXR5cGVzKVxuICAgKi9cbiAgZGF0YVR5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogT3B0aW9uYWwgbGltaXQgdGhlIG51bWJlciBvZiB2YWx1ZXMgcmV0dXJuZWQuIERlZmF1bHRzIHRvIDEwMDBcbiAgICovXG4gIGxpbWl0PzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBpbmRpY2F0b3IgdG8gc29ydCB2YWx1ZXMgYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmdcbiAgICovXG4gIGFzY2VuZGluZz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEluIEFuZHJvaWQsIGl0IGlzIHBvc3NpYmxlIHRvIHF1ZXJ5IGZvciBcInJhd1wiIHN0ZXBzIG9yIHRvIHNlbGVjdCB0aG9zZSBhcyBmaWx0ZXJlZCBieSB0aGUgR29vZ2xlIEZpdCBhcHAuXG4gICAqIEluIHRoZSBsYXR0ZXIgY2FzZSB0aGUgcXVlcnkgb2JqZWN0IG11c3QgY29udGFpbiB0aGUgZmllbGQgZmlsdGVyZWQ6IHRydWUuXG4gICAqL1xuICBmaWx0ZXJlZD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQGhpZGRlblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aFF1ZXJ5T3B0aW9uc0FnZ3JlZ2F0ZWQge1xuICAvKipcbiAgICogU3RhcnQgZGF0ZSBmcm9tIHdoaWNoIHRvIGdldCBkYXRhXG4gICAqL1xuICBzdGFydERhdGU6IERhdGU7XG5cbiAgLyoqXG4gICAqIEVuZCBkYXRlIGZyb20gd2hpY2ggdG8gZ2V0IGRhdGFcbiAgICovXG4gIGVuZERhdGU6IERhdGU7XG5cbiAgLyoqXG4gICAqIERhdGF0eXBlIHRvIGJlIHF1ZXJpZWQgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGFyaW9zYWx2aTc4L2NvcmRvdmEtcGx1Z2luLWhlYWx0aCNzdXBwb3J0ZWQtZGF0YS10eXBlcylcbiAgICovXG4gIGRhdGFUeXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGlmIHNwZWNpZmllZCwgYWdncmVnYXRpb24gaXMgZ3JvdXBlZCBhbiBhcnJheSBvZiBcImJ1Y2tldHNcIiAod2luZG93cyBvZiB0aW1lKSxcbiAgICogc3VwcG9ydGVkIHZhbHVlcyBhcmU6ICdob3VyJywgJ2RheScsICd3ZWVrJywgJ21vbnRoJywgJ3llYXInLlxuICAgKi9cbiAgYnVja2V0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJbiBBbmRyb2lkLCBpdCBpcyBwb3NzaWJsZSB0byBxdWVyeSBmb3IgXCJyYXdcIiBzdGVwcyBvciB0byBzZWxlY3QgdGhvc2UgYXMgZmlsdGVyZWQgYnkgdGhlIEdvb2dsZSBGaXQgYXBwLlxuICAgKiBJbiB0aGUgbGF0dGVyIGNhc2UgdGhlIHF1ZXJ5IG9iamVjdCBtdXN0IGNvbnRhaW4gdGhlIGZpZWxkIGZpbHRlcmVkOiB0cnVlLlxuICAgKi9cbiAgZmlsdGVyZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIZWFsdGhTdG9yZU9wdGlvbnMge1xuICAvKipcbiAgICogU3RhcnQgZGF0ZSBmcm9tIHdoaWNoIHRvIGdldCBkYXRhXG4gICAqL1xuICBzdGFydERhdGU6IERhdGU7XG5cbiAgLyoqXG4gICAqIEVuZCBkYXRlIGZyb20gd2hpY2ggdG8gZ2V0IGRhdGFcbiAgICovXG4gIGVuZERhdGU6IERhdGU7XG5cbiAgLyoqXG4gICAqIERhdGF0eXBlIHRvIGJlIHF1ZXJpZWQgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGFyaW9zYWx2aTc4L2NvcmRvdmEtcGx1Z2luLWhlYWx0aCNzdXBwb3J0ZWQtZGF0YS10eXBlcylcbiAgICovXG4gIGRhdGFUeXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFZhbHVlIG9mIGNvcnJlc3BvbmRpbmcgRGF0YXR5cGUgKHNlZSBcIk92ZXJ2aWV3IG9mIHZhbGlkIGRhdGF0eXBlc1wiKVxuICAgKi9cbiAgdmFsdWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHNvdXJjZSB0aGF0IHByb2R1Y2VkIHRoaXMgZGF0YS4gSW4gaU9TIHRoaXMgaXMgaWdub3JlZCBhbmRcbiAgICogc2V0IGF1dG9tYXRpY2FsbHkgdG8gdGhlIG5hbWUgb2YgeW91ciBhcHAuXG4gICAqL1xuICBzb3VyY2VOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb21wbGV0ZSBwYWNrYWdlIG9mIHRoZSBzb3VyY2UgdGhhdCBwcm9kdWNlZCB0aGlzIGRhdGEuXG4gICAqIEluIEFuZHJvaWQsIGlmIG5vdCBzcGVjaWZpZWQsIGl0J3MgYXNzaWduZWQgdG8gdGhlIHBhY2thZ2Ugb2YgdGhlIEFwcC4gSW4gaU9TIHRoaXMgaXMgaWdub3JlZCBhbmRcbiAgICogc2V0IGF1dG9tYXRpY2FsbHkgdG8gdGhlIGJ1bmRlIGlkIG9mIHRoZSBhcHAuXG4gICAqL1xuICBzb3VyY2VCdW5kbGVJZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIZWFsdGhEYXRhIHtcbiAgLyoqXG4gICAqIFN0YXJ0IGRhdGUgZnJvbSB3aGljaCB0byBnZXQgZGF0YVxuICAgKi9cbiAgc3RhcnREYXRlOiBEYXRlO1xuXG4gIC8qKlxuICAgKiBFbmQgZGF0ZSBmcm9tIHdoaWNoIHRvIGdldCBkYXRhXG4gICAqL1xuICBlbmREYXRlOiBEYXRlO1xuXG4gIC8qKlxuICAgKiBWYWx1ZSBvZiBjb3JyZXNwb25kaW5nIERhdGF0eXBlIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2Rhcmlvc2Fsdmk3OC9jb3Jkb3ZhLXBsdWdpbi1oZWFsdGgjc3VwcG9ydGVkLWRhdGEtdHlwZXMpXG4gICAqL1xuICB2YWx1ZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBVbml0IG9mIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2YgRGF0YXR5cGUgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vZGFyaW9zYWx2aTc4L2NvcmRvdmEtcGx1Z2luLWhlYWx0aCNzdXBwb3J0ZWQtZGF0YS10eXBlcylcbiAgICovXG4gIHVuaXQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHNvdXJjZSB0aGF0IHByb2R1Y2VkIHRoaXMgZGF0YS4gSW4gaU9TIHRoaXMgaXMgaWdub3JlZCBhbmRcbiAgICogc2V0IGF1dG9tYXRpY2FsbHkgdG8gdGhlIG5hbWUgb2YgeW91ciBhcHAuXG4gICAqL1xuICBzb3VyY2VOYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjb21wbGV0ZSBwYWNrYWdlIG9mIHRoZSBzb3VyY2UgdGhhdCBwcm9kdWNlZCB0aGlzIGRhdGEuXG4gICAqIEluIEFuZHJvaWQsIGlmIG5vdCBzcGVjaWZpZWQsIGl0J3MgYXNzaWduZWQgdG8gdGhlIHBhY2thZ2Ugb2YgdGhlIEFwcC4gSW4gaU9TIHRoaXMgaXMgaWdub3JlZCBhbmRcbiAgICogc2V0IGF1dG9tYXRpY2FsbHkgdG8gdGhlIGJ1bmRlIGlkIG9mIHRoZSBhcHAuXG4gICAqL1xuICBzb3VyY2VCdW5kbGVJZDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIEhlYWx0aFxuICogQGRlc2NyaXB0aW9uXG4gKiBBIHBsdWdpbiB0aGF0IGFic3RyYWN0cyBmaXRuZXNzIGFuZCBoZWFsdGggcmVwb3NpdG9yaWVzIGxpa2UgQXBwbGUgSGVhbHRoS2l0IG9yIEdvb2dsZSBGaXQuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBIZWFsdGggfSBmcm9tICdAaW9uaWMtbmF0aXZlL2hlYWx0aC9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGhlYWx0aDogSGVhbHRoKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLmhlYWx0aC5pc0F2YWlsYWJsZSgpXG4gKiAudGhlbigoYXZhaWxhYmxlOmJvb2xlYW4pID0+IHtcbiAqICAgY29uc29sZS5sb2coYXZhaWxhYmxlKTtcbiAqICAgdGhpcy5oZWFsdGgucmVxdWVzdEF1dGhvcml6YXRpb24oW1xuICogICAgICdkaXN0YW5jZScsICdudXRyaXRpb24nLCAgLy9yZWFkIGFuZCB3cml0ZSBwZXJtaXNzaW9uc1xuICogICAgIHtcbiAqICAgICAgIHJlYWQ6IFsnc3RlcHMnXSwgICAgICAgLy9yZWFkIG9ubHkgcGVybWlzc2lvblxuICogICAgICAgd3JpdGU6IFsnaGVpZ2h0JywgJ3dlaWdodCddICAvL3dyaXRlIG9ubHkgcGVybWlzc2lvblxuICogICAgIH1cbiAqICAgXSlcbiAqICAgLnRoZW4ocmVzID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKGUpKTtcbiAqIH0pXG4gKiAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZyhlKSk7XG4gKlxuICogYGBgXG4gKiBTZWUgZGVzY3JpcHRpb24gYXQgaHR0cHM6Ly9naXRodWIuY29tL2Rhcmlvc2Fsdmk3OC9jb3Jkb3ZhLXBsdWdpbi1oZWFsdGggZm9yIGEgZnVsbCBsaXN0IG9mIERhdGF0eXBlcyBhbmQgc2VlIGV4YW1wbGVzLlxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBIZWFsdGhRdWVyeU9wdGlvbnNcbiAqIEhlYWx0aFF1ZXJ5T3B0aW9uc0FnZ3JlZ2F0ZWRcbiAqIEhlYWx0aFN0b3JlT3B0aW9uc1xuICogSGVhbHRoRGF0YVxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0hlYWx0aCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWhlYWx0aCcsXG4gIHBsdWdpblJlZjogJ25hdmlnYXRvci5oZWFsdGgnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Rhcmlvc2Fsdmk3OC9jb3Jkb3ZhLXBsdWdpbi1oZWFsdGgnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSGVhbHRoIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogVGVsbHMgaWYgZWl0aGVyIEdvb2dsZSBGaXQgb3IgSGVhbHRoS2l0IGFyZSBhdmFpbGFibGUuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBpc0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHJlY2VudCBHb29nbGUgUGxheSBTZXJ2aWNlcyBhbmQgR29vZ2xlIEZpdCBhcmUgaW5zdGFsbGVkLiBJZiB0aGUgcGxheSBzZXJ2aWNlcyBhcmUgbm90IGluc3RhbGxlZCxcbiAgICogb3IgYXJlIG9ic29sZXRlLCBpdCB3aWxsIHNob3cgYSBwb3AtdXAgc3VnZ2VzdGluZyB0byBkb3dubG9hZCB0aGVtLiBJZiBHb29nbGUgRml0IGlzIG5vdCBpbnN0YWxsZWQsXG4gICAqIGl0IHdpbGwgb3BlbiB0aGUgUGxheSBTdG9yZSBhdCB0aGUgbG9jYXRpb24gb2YgdGhlIEdvb2dsZSBGaXQgYXBwLlxuICAgKiBUaGUgcGx1Z2luIGRvZXMgbm90IHdhaXQgdW50aWwgdGhlIG1pc3NpbmcgcGFja2FnZXMgYXJlIGluc3RhbGxlZCwgaXQgd2lsbCByZXR1cm4gaW1tZWRpYXRlbHkuXG4gICAqIElmIGJvdGggUGxheSBTZXJ2aWNlcyBhbmQgR29vZ2xlIEZpdCBhcmUgYXZhaWxhYmxlLCB0aGlzIGZ1bmN0aW9uIGp1c3QgcmV0dXJucyB3aXRob3V0IGFueSB2aXNpYmxlIGVmZmVjdC5cbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBvbiBBbmRyb2lkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICB9KVxuICBwcm9tcHRJbnN0YWxsRml0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzIHJlYWQgYW5kL29yIHdyaXRlIGFjY2VzcyB0byBhIHNldCBvZiBkYXRhIHR5cGVzLiBJdCBpcyByZWNvbW1lbmRhYmxlIHRvIGFsd2F5cyBleHBsYWluIHdoeSB0aGUgYXBwXG4gICAqIG5lZWRzIGFjY2VzcyB0byB0aGUgZGF0YSBiZWZvcmUgYXNraW5nIHRoZSB1c2VyIHRvIGF1dGhvcml6ZSBpdC5cbiAgICogVGhpcyBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgdXNpbmcgdGhlIHF1ZXJ5IGFuZCBzdG9yZSBmdW5jdGlvbnMsIGV2ZW4gaWYgdGhlIGF1dGhvcml6YXRpb24gaGFzIGFscmVhZHlcbiAgICogYmVlbiBnaXZlbiBhdCBzb21lIHBvaW50IGluIHRoZSBwYXN0LlxuICAgKlxuICAgKiBRdWlya3Mgb2YgcmVxdWVzdEF1dGhvcml6YXRpb24oKVxuICAgKlxuICAgKiBJbiBBbmRyb2lkLCBpdCB3aWxsIHRyeSB0byBnZXQgYXV0aG9yaXphdGlvbiBmcm9tIHRoZSBHb29nbGUgRml0IEFQSXMuXG4gICAqIEl0IGlzIG5lY2Vzc2FyeSB0aGF0IHRoZSBhcHAncyBwYWNrYWdlIG5hbWUgYW5kIHRoZSBzaWduaW5nIGtleSBhcmUgcmVnaXN0ZXJlZCBpbiB0aGUgR29vZ2xlIEFQSSBjb25zb2xlLlxuICAgKiBJbiBBbmRyb2lkLCBiZSBhd2FyZSB0aGF0IGlmIHRoZSBhY3Rpdml0eSBpcyBkZXN0cm95ZWQgKGUuZy4gYWZ0ZXIgYSByb3RhdGlvbikgb3IgaXMgcHV0IGluIGJhY2tncm91bmQsXG4gICAqIHRoZSBjb25uZWN0aW9uIHRvIEdvb2dsZSBGaXQgbWF5IGJlIGxvc3Qgd2l0aG91dCBhbnkgY2FsbGJhY2suIEdvaW5nIHRocm91Z2ggdGhlIGF1dGhvcml6YXRpb24gd2lsbCBlbnN1cmUgdGhhdFxuICAgKiB0aGUgYXBwIGlzIGNvbm5lY3RlZCBhZ2Fpbi5cbiAgICogSW4gQW5kcm9pZCA2IGFuZCBvdmVyLCB0aGlzIGZ1bmN0aW9uIHdpbGwgYWxzbyBhc2sgZm9yIHNvbWUgZHluYW1pYyBwZXJtaXNzaW9ucyBpZiBuZWVkZWRcbiAgICogKGUuZy4gaW4gdGhlIGNhc2Ugb2YgXCJkaXN0YW5jZVwiLCBpdCB3aWxsIG5lZWQgYWNjZXNzIHRvIEFDQ0VTU19GSU5FX0xPQ0FUSU9OKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXSB8IEhlYWx0aERhdGFUeXBlW119IGRhdGF0eXBlcyBhIGxpc3Qgb2YgZGF0YSB0eXBlcyB5b3Ugd2FudCB0byBiZSBncmFudGVkIGFjY2VzcyB0by5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXF1ZXN0QXV0aG9yaXphdGlvbihkYXRhdHlwZXM6IChzdHJpbmcgfCBIZWFsdGhEYXRhVHlwZSlbXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBhcHAgaGFzIGF1dGhvcml6YXRpb24gdG8gcmVhZC93cml0ZSBhIHNldCBvZiBkYXRhdHlwZXMuXG4gICAqXG4gICAqIFF1aXJrcyBvZiBpc0F1dGhvcml6ZWQoKVxuICAgKlxuICAgKiBJbiBpT1MsIHRoaXMgZnVuY3Rpb24gd2lsbCBvbmx5IGNoZWNrIGF1dGhvcml6YXRpb24gc3RhdHVzIGZvciB3cml0YWJsZSBkYXRhLlxuICAgKiBSZWFkLW9ubHkgZGF0YSB3aWxsIGFsd2F5cyBiZSBjb25zaWRlcmVkIGFzIG5vdCBhdXRob3JpemVkLiBUaGlzIGlzIGFuIGludGVuZGVkIGJlaGF2aW91ciBvZiBIZWFsdGhLaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nW10gfCBIZWFsdGhEYXRhVHlwZVtdfSBkYXRhdHlwZXMgYSBsaXN0IG9mIGRhdGEgdHlwZXMgeW91IHdhbnQgdG8gY2hlY2sgYWNjZXNzIG9mLCBzYW1lIGFzIGluIHJlcXVlc3RBdXRob3JpemF0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgdGhlIGF1dGhvcml6YXRpb24gc3RhdHVzXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlzQXV0aG9yaXplZChkYXRhdHlwZXM6IChzdHJpbmcgfCBIZWFsdGhEYXRhVHlwZSlbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFsbCB0aGUgZGF0YSBwb2ludHMgb2YgYSBjZXJ0YWluIGRhdGEgdHlwZSB3aXRoaW4gYSBjZXJ0YWluIHRpbWUgd2luZG93LlxuICAgKiBXYXJuaW5nOiBpZiB0aGUgdGltZSBzcGFuIGlzIGJpZywgaXQgY2FuIGdlbmVyYXRlIGxvbmcgYXJyYXlzIVxuICAgKlxuICAgKiBRdWlya3Mgb2YgcXVlcnkoKVxuICAgKlxuICAgKiBJbiBpT1MsIHRoZSBhbW91bnQgb2YgZGF0YXBvaW50cyBpcyBsaW1pdGVkIHRvIDEwMDAgYnkgZGVmYXVsdC5cbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGJ5IGFkZGluZyBhIGxpbWl0OiB4eHggdG8geW91ciBxdWVyeSBvYmplY3QuXG4gICAqIEluIGlPUywgZGF0YXBvaW50cyBhcmUgb3JkZXJlZCBpbiBhbiBkZXNjZW5kaW5nIGZhc2hpb24gKGZyb20gbmV3ZXIgdG8gb2xkZXIpLlxuICAgKiBZb3UgY2FuIHJldmVydCB0aGlzIGJlaGF2aW91ciBieSBhZGRpbmcgYXNjZW5kaW5nOiB0cnVlIHRvIHlvdXIgcXVlcnkgb2JqZWN0LlxuICAgKiBJbiBBbmRyb2lkLCBpdCBpcyBwb3NzaWJsZSB0byBxdWVyeSBmb3IgXCJyYXdcIiBzdGVwcyBvciB0byBzZWxlY3QgdGhvc2UgYXMgZmlsdGVyZWQgYnkgdGhlIEdvb2dsZSBGaXQgYXBwLlxuICAgKiBJbiB0aGUgbGF0dGVyIGNhc2UgdGhlIHF1ZXJ5IG9iamVjdCBtdXN0IGNvbnRhaW4gdGhlIGZpZWxkIGZpbHRlcmVkOiB0cnVlLlxuICAgKiBJbiBHb29nbGUgRml0LCBjYWxvcmllcy5iYXNhbCBpcyByZXR1cm5lZCBhcyBhbiBhdmVyYWdlIHBlciBkYXksIGFuZCB1c3VhbGx5IGlzIG5vdCBhdmFpbGFibGUgaW4gYWxsIGRheXMuXG4gICAqIEluIEdvb2dsZSBGaXQsIGNhbG9yaWVzLmFjdGl2ZSBpcyBjb21wdXRlZCBieSBzdWJ0cmFjdGluZyB0aGUgYmFzYWwgY2Fsb3JpZXMgZnJvbSB0aGUgdG90YWwuXG4gICAqIEFzIGJhc2FsIGVuZXJneSBleHBlbmRpdHVyZSwgYW4gYXZlcmFnZSBpcyBjb21wdXRlZCBmcm9tIHRoZSB3ZWVrIGJlZm9yZSBlbmREYXRlLlxuICAgKiBXaGlsZSBHb29nbGUgRml0IGNhbGN1bGF0ZXMgYmFzYWwgYW5kIGFjdGl2ZSBjYWxvcmllcyBhdXRvbWF0aWNhbGx5LFxuICAgKiBIZWFsdGhLaXQgbmVlZHMgYW4gZXhwbGljaXQgaW5wdXQgZnJvbSBzb21lIGFwcC5cbiAgICogV2hlbiBxdWVyeWluZyBmb3IgYWN0aXZpdGllcywgR29vZ2xlIEZpdCBpcyBhYmxlIHRvIGRldGVybWluZSBzb21lIGFjdGl2aXRpZXMgYXV0b21hdGljYWxseVxuICAgKiAoc3RpbGwsIHdhbGtpbmcsIHJ1bm5pbmcsIGJpa2luZywgaW4gdmVoaWNsZSksIHdoaWxlIEhlYWx0aEtpdCBvbmx5IHJlbGllcyBvbiB0aGUgaW5wdXQgb2ZcbiAgICogdGhlIHVzZXIgb3Igb2Ygc29tZSBleHRlcm5hbCBhcHAuXG4gICAqIFdoZW4gcXVlcnlpbmcgZm9yIGFjdGl2aXRpZXMsIGNhbG9yaWVzIGFuZCBkaXN0YW5jZSBhcmUgYWxzbyBwcm92aWRlZCBpbiBIZWFsdGhLaXQgKHVuaXRzIGFyZSBrY2FsIGFuZCBtZXRlcnMpIGFuZFxuICAgKiBuZXZlciBpbiBHb29nbGUgRml0LlxuICAgKiBXaGVuIHF1ZXJ5aW5nIGZvciBudXRyaXRpb24sIEdvb2dsZSBGaXQgYWx3YXlzIHJldHVybnMgYWxsIHRoZSBudXRyaXRpb24gZWxlbWVudHMgaXQgaGFzLFxuICAgKiB3aGlsZSBIZWFsdGhLaXQgcmV0dXJucyBvbmx5IHRob3NlIHRoYXQgYXJlIHN0b3JlZCBhcyBjb3JyZWxhdGlvbi4gVG8gYmUgc3VyZSB0byBnZXQgYWxsIHN0b3JlZCB0aGUgcXVhbnRpdGllc1xuICAgKiAocmVnYXJkbGVzcyBvZiB0aGV5IGFyZSBzdG9yZWQgYXMgY29ycmVsYXRpb24gb3Igbm90KSwgaXQncyBiZXR0ZXIgdG8gcXVlcnkgc2luZ2xlIG51dHJpZW50cy5cbiAgICogbnV0cml0aW9uLnZpdGFtaW5fYSBpcyBnaXZlbiBpbiBtaWNyb2dyYW1zIGluIEhlYWx0aEtpdCBhbmQgSW50ZXJuYXRpb25hbCBVbml0IGluIEdvb2dsZSBGaXQuXG4gICAqIEF1dG9tYXRpYyBjb252ZXJzaW9uIGlzIG5vdCB0cml2aWFsIGFuZCBkZXBlbmRzIG9uIHRoZSBhY3R1YWwgc3Vic3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0hlYWx0aFF1ZXJ5T3B0aW9uc30gcXVlcnlPcHRpb25zXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SGVhbHRoRGF0YVtdPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcXVlcnkocXVlcnlPcHRpb25zOiBIZWFsdGhRdWVyeU9wdGlvbnMpOiBQcm9taXNlPEhlYWx0aERhdGFbXT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIGFnZ3JlZ2F0ZWQgZGF0YSBpbiBhIGNlcnRhaW4gdGltZSB3aW5kb3cuIFVzdWFsbHkgdGhlIHN1bSBpcyByZXR1cm5lZCBmb3IgdGhlIGdpdmVuIHF1YW50aXR5LlxuICAgKlxuICAgKiBRdWlya3Mgb2YgcXVlcnlBZ2dyZWdhdGVkKClcbiAgICogSW4gQW5kcm9pZCwgdG8gcXVlcnkgZm9yIHN0ZXBzIGFzIGZpbHRlcmVkIGJ5IHRoZSBHb29nbGUgRml0IGFwcCwgdGhlIGZsYWcgZmlsdGVyZWQ6XG4gICAqIHRydWUgbXVzdCBiZSBhZGRlZCBpbnRvIHRoZSBxdWVyeSBvYmplY3QuXG4gICAqIFdoZW4gcXVlcnlpbmcgZm9yIGFjdGl2aXRpZXMsIGNhbG9yaWVzIGFuZCBkaXN0YW5jZSBhcmUgcHJvdmlkZWRcbiAgICogd2hlbiBhdmFpbGFibGUgaW4gSGVhbHRoS2l0IGFuZCBuZXZlciBpbiBHb29nbGUgRml0LlxuICAgKiBJbiBBbmRyb2lkLCB0aGUgc3RhcnQgYW5kIGVuZCBkYXRlcyByZXR1cm5lZCBhcmUgdGhlIGRhdGUgb2YgdGhlIGZpcnN0IGFuZCB0aGUgbGFzdCBhdmFpbGFibGUgc2FtcGxlcy5cbiAgICogSWYgbm8gc2FtcGxlcyBhcmUgZm91bmQsIHN0YXJ0IGFuZCBlbmQgbWF5IG5vdCBiZSBzZXQuXG4gICAqIFdoZW4gYnVja2V0aW5nLCBidWNrZXRzIHdpbGwgaW5jbHVkZSB0aGUgd2hvbGUgaG91ciAvIGRheSAvIG1vbnRoIC8gd2VlayAvIHllYXIgd2hlcmUgc3RhcnQgYW5kIGVuZCB0aW1lc1xuICAgKiBmYWxsIGludG8uIEZvciBleGFtcGxlLCBpZiB5b3VyIHN0YXJ0IHRpbWUgaXMgMjAxNi0xMC0yMSAxMDo1MzozNCxcbiAgICogdGhlIGZpcnN0IGRhaWx5IGJ1Y2tldCB3aWxsIHN0YXJ0IGF0IDIwMTYtMTAtMjEgMDA6MDA6MDAuXG4gICAqIFdlZWtzIHN0YXJ0IG9uIE1vbmRheS5cbiAgICogV2hlbiBxdWVyeWluZyBmb3IgbnV0cml0aW9uLCBIZWFsdGhLaXQgcmV0dXJucyBvbmx5IHRob3NlIHRoYXQgYXJlIHN0b3JlZCBhcyBjb3JyZWxhdGlvbi5cbiAgICogVG8gYmUgc3VyZSB0byBnZXQgYWxsIHRoZSBzdG9yZWQgcXVhbnRpdGllcywgaXQncyBiZXR0ZXIgdG8gcXVlcnkgc2luZ2xlIG51dHJpZW50cy5cbiAgICogbnV0cml0aW9uLnZpdGFtaW5fYSBpcyBnaXZlbiBpbiBtaWNyb2dyYW1zIGluIEhlYWx0aEtpdCBhbmQgSW50ZXJuYXRpb25hbCBVbml0IGluIEdvb2dsZSBGaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7SGVhbHRoUXVlcnlPcHRpb25zQWdncmVnYXRlZH0gcXVlcnlPcHRpb25zQWdncmVnYXRlZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEhlYWx0aERhdGFbXT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHF1ZXJ5QWdncmVnYXRlZChxdWVyeU9wdGlvbnNBZ2dyZWdhdGVkOiBIZWFsdGhRdWVyeU9wdGlvbnNBZ2dyZWdhdGVkKTogUHJvbWlzZTxIZWFsdGhEYXRhW10+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcmVzIGEgZGF0YSBwb2ludC5cbiAgICpcbiAgICogUXVpcmtzIG9mIHN0b3JlKClcbiAgICpcbiAgICogR29vZ2xlIEZpdCBkb2Vzbid0IGFsbG93IHlvdSB0byBvdmVyd3JpdGUgZGF0YSBwb2ludHMgdGhhdCBvdmVybGFwIHdpdGggb3RoZXJzIGFscmVhZHkgc3RvcmVkIG9mIHRoZSBzYW1lIHR5cGUgKHNlZSBoZXJlKS4gQXQgdGhlIG1vbWVudCB0aGVyZSBpcyBubyBzdXBwb3J0IGZvciB1cGRhdGUgbm9yIGRlbGV0ZS5cbiAgICogSW4gaU9TIHlvdSBjYW5ub3Qgc3RvcmUgdGhlIHRvdGFsIGNhbG9yaWVzLCB5b3UgbmVlZCB0byBzcGVjaWZ5IGVpdGhlciBiYXNhbCBvciBhY3RpdmUuIElmIHlvdSB1c2UgdG90YWwgY2Fsb3JpZXMsIHRoZSBhY3RpdmUgb25lcyB3aWxsIGJlIHN0b3JlZC5cbiAgICogSW4gQW5kcm9pZCB5b3UgY2FuIG9ubHkgc3RvcmUgYWN0aXZlIGNhbG9yaWVzLCBhcyB0aGUgYmFzYWwgYXJlIGVzdGltYXRlZCBhdXRvbWF0aWNhbGx5LiBJZiB5b3Ugc3RvcmUgdG90YWwgY2Fsb3JpZXMsIHRoZXNlIHdpbGwgYmUgdHJlYXRlZCBhcyBhY3RpdmUuXG4gICAqIEluIGlPUyBkaXN0YW5jZSBpcyBhc3N1bWVkIHRvIGJlIG9mIHR5cGUgV2Fsa2luZ1J1bm5pbmcsIGlmIHlvdSB3YW50IHRvIGV4cGxpY2l0bHkgc2V0IGl0IHRvIEN5Y2xpbmcgeW91IG5lZWQgdG8gYWRkIHRoZSBmaWVsZCBjeWNsaW5nOiB0cnVlLlxuICAgKiBJbiBpT1Mgc3RvcmluZyB0aGUgc2xlZXAgYWN0aXZpdGllcyBpcyBub3Qgc3VwcG9ydGVkIGF0IHRoZSBtb21lbnQuXG4gICAqIFN0b3Jpbmcgb2YgbnV0cmllbnRzIGlzIG5vdCBzdXBwb3J0ZWQgYXQgdGhlIG1vbWVudC5cbiAgICogQHBhcmFtIHN0b3JlT3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3JlKHN0b3JlT3B0aW9uczogSGVhbHRoU3RvcmVPcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==